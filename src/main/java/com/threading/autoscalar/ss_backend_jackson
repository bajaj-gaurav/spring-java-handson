 public ResponseEntity<List<Organization>> listAllOrgs() {
        HttpEntity<String> getReq = new HttpEntity<String>("", getAuthenticationHeader());
        URI path = UriComponentsBuilder
                .fromUriString(getSsUrl())
                .path(getListAllOrgsUrl()).build().toUri();
        logger.info("List Orgs url: {}", path);
        return restTemplate
                .exchange(path, HttpMethod.GET, getReq, new ParameterizedTypeReference<List<Organization>>() {
                });
    }



    /**
     * Test list Orgs using operator client.
     *
     * @throws Exception Throw Exception if list Orgs fails
     */
    @Test(dependsOnGroups = {TestGroups.E2E_DEPLOY_SDDC_WITHOUT_SUBSCRIPTION}, groups = TestGroups.E2E_POST_DEPLOY_SDDC)
    public void testListOrgs() throws Exception {
        try {
            boolean foundTestbedInfoOrg = false;
            logger.info("Starting List Orgs using Operator client test");
            ResponseEntity<List<Organization>> listOfOrgs = operatorClient.listAllOrgs();
            logger.info("Got List Orgs response");
            Assert.assertTrue(operatorClient.checkStatusCode(listOfOrgs, HttpStatus.OK),
                    "Failed to get the list of all orgs");
            Assert.assertTrue(!listOfOrgs.getBody().isEmpty(),
                    "Expected at least one org, observed: " + listOfOrgs.getBody().size());
            logger.info("Printing all orgs: ");
            for (Organization prj: listOfOrgs.getBody()) {
                logger.info("Org ID: " + prj.getId());
                if (prj.getId().equals(orgId)) {
                    foundTestbedInfoOrg = true;
                }
            }
            Assert.assertTrue(foundTestbedInfoOrg,
                    "Failed to find the testbedInfo org in the org list. testbedInfo orgId = " + orgId);
        } catch (Throwable e) {
            logger.error("Error while obtaining list of orgs {}",
                    e.getLocalizedMessage());
            throw e;
        }
    }







Gaurav tried code

        RestTemplate restTemplate = new RestTemplate();

        HttpHeaders headers = new HttpHeaders();
        headers.set("csp-auth-token", token );
        headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
        HttpEntity<String> entity = new HttpEntity<String>("parameters", headers);

        ResponseEntity<List<SddcOutputInterface>> result = restTemplate.exchange(path, HttpMethod.GET, entity, new ParameterizedTypeReference<List<SddcOutputInterface>>(){});
        //SddcOutputInterface sddc = result.getBody();
        //System.out.println(sddc.getId());
        //To get the type of the object
        System.out.println(result.getBody().getClass());
        for(SddcOutputInterface sddc: result.getBody())
        {
            System.out.println(sddc);
            System.out.println(sddc.getId());
        }
        //String body = result.getBody();
/*
        JSONParser parser = new JSONParser();
        JSONObject objects = body.getJSONObject(i);
        JSONObject json = null;
        try {
            json = (JSONObject) parser.parse(result.getBody());
        } catch (ParseException e) {
            e.printStackTrace();
        }
*/
        //JSON from String to Object
        /*try {
            SddcOutputInterface user = mapper.readValue(body, SddcOutputInterface.class);
            System.out.println(user.getId());
        } catch (IOException e) {
            e.printStackTrace();
        }*/
        /*try {
            for(Object sddc: json)
            {

                System.out.println(json.get("id"));
            }
        } catch (ParseException e) {
            e.printStackTrace();
        }*/
